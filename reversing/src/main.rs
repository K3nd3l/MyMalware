// Compile: cargo build

/*
[package]
name = "password_generator"
version = "0.1.0"
edition = "2018"

[dependencies]
chrono = "0.4"
rust-crypto = "0.2"
*/

// Import necessary modules from external crates
use chrono::prelude::*;
use crypto::digest::Digest;
use crypto::sha2::Sha256;
use std::fs::File;
use std::io::{self, Write};
use std::env;

// Entry point of the program
fn main() {
    // Get the user input for the string to append
    println!("Enter the string to append to the password:");
    let mut append_string = String::new();
    io::stdin().read_line(&mut append_string).expect("Failed to read line");

    // Get the current date and format it as a string
    let date_string = &Utc::now().format("%m/%d/%Y").to_string();
    
    // Create a seed for password generation using the date and user input
    let password_seed = format!("{}{}", date_string, append_string.trim());
    println!("Password before sha: {}", password_seed);

    // Generate the password using the seed
    let generated_password = generate_password(&password_seed);

    println!("Password after sha: {}", generated_password);

    // Specify the file path to save the password
    let current_dir = env::current_dir().expect("Failed to get current directory");
    let password_file_path = current_dir.join("password").join("password.txt");

    // Try to create the password file
    if let Ok(mut password_file) = File::create(&password_file_path) {
        // Write the generated password to the file
        if let Err(err) = password_file.write_all(generated_password.as_bytes()) {
            eprintln!("Error writing password to file: {}", err);
        } else {
            println!("Password saved to {:?}", password_file_path);
        }
    } else {
        eprintln!("Error creating password file {:?}", password_file_path);
    }
}

// Function to generate a hashed password using a seed
fn generate_password(seed: &str) -> String {
    // Create a Sha256 hasher
    let mut sha = Sha256::new();
    // Input the seed into the hasher
    sha.input_str(seed);

    // Get the hashed result
    let hashed = sha.result_str();
    hashed
}
